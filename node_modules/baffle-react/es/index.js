var _class, _temp;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from "react";
import PropTypes from "prop-types";
import baffle from "./baffle";
import pickBy from "lodash/pickBy";

var Baffle = (_temp = _class = function (_Component) {
  _inherits(Baffle, _Component);

  function Baffle() {
    _classCallCheck(this, Baffle);

    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
  }

  Baffle.prototype.componentDidMount = function componentDidMount() {
    var _props = this.props,
        update = _props.update,
        obfuscate = _props.obfuscate,
        characters = _props.characters,
        exclude = _props.exclude,
        speed = _props.speed,
        revealDuration = _props.revealDuration,
        revealDelay = _props.revealDelay;


    var options = pickBy({ characters: characters, exclude: exclude, speed: speed }, function (value) {
      return value !== undefined;
    });

    this.baffle = baffle(this.span, options);

    if (update && obfuscate) {
      this.baffle.start();
    } else if (!update && obfuscate) {
      this.baffle.once();
    } else if (update && !obfuscate) {
      this.baffle.start();
      this.baffle.reveal(revealDuration, revealDelay);
    }
  };

  // TODO: clean up this function, it's gross


  Baffle.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
    var _props2 = this.props,
        children = _props2.children,
        characters = _props2.characters,
        exclude = _props2.exclude,
        speed = _props2.speed,
        obfuscate = _props2.obfuscate,
        update = _props2.update,
        revealDuration = _props2.revealDuration,
        revealDelay = _props2.revealDelay;


    var options = pickBy({ characters: characters, exclude: exclude, speed: speed }, function (value, key) {
      return value !== prevProps[key];
    });

    this.baffle.set(options);

    if (update && !prevProps.update && obfuscate || obfuscate && !prevProps.obfuscate && update) {
      this.baffle.start();
    } else if (!update && prevProps.update) {
      this.baffle.stop();
    }

    if (!obfuscate && prevProps.obfuscate) {
      if (!update) {
        this.baffle.reveal();
      } else {
        this.baffle.reveal(revealDuration, revealDelay);
      }
    }

    if (obfuscate && !prevProps.obfuscate && !update) {
      this.baffle.once();
    }

    if (children !== prevProps.children) {
      this.baffle.text(function () {
        return children;
      });
    }
  };

  Baffle.prototype.render = function render() {
    var _this2 = this;

    var children = this.props.children;

    return React.createElement(
      "span",
      { ref: function ref(span) {
          return _this2.span = span;
        } },
      children
    );
  };

  return Baffle;
}(Component), _class.defaultProps = {
  characters: "AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz~!@#$%^&*()-+=[]{}|;:,./<>?",
  exclude: [" "],
  speed: 50,
  obfuscate: true,
  update: true,
  revealDuration: 1000,
  revealDelay: 0
}, _temp);
export { Baffle as default };
process.env.NODE_ENV !== "production" ? Baffle.propTypes = {
  children: PropTypes.string,
  characters: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),
  exclude: PropTypes.array,
  speed: PropTypes.number,
  obfuscate: PropTypes.bool,
  update: PropTypes.bool,
  revealDuration: PropTypes.number,
  revealDelay: PropTypes.number
} : void 0;